/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.atsinformatica.midler.components;

import com.towel.collections.paginator.ListPaginator;
import com.towel.collections.paginator.Paginator;
import com.towel.swing.table.ObjectTableModel;
import java.awt.Dimension;
import javax.swing.JTable;

/**
 *
 * @author AlexsanderPimenta
 */
public class CustomTableCP<T> extends javax.swing.JPanel {

    private ObjectTableModel<T> model;
    private Paginator<T> paginator;

    /**
     * Construtor padrão da classe
     */
    public CustomTableCP() {
        initComponents();

        this.setPreferredSize(new Dimension(761, 238));
    }

    /**
     * Construtor com inicialização dos componentes
     *
     * @param model dados
     * @param paginator paginador
     */
    public CustomTableCP(ObjectTableModel<T> model, Paginator<T> paginator) {
        this();
        this.model = model;
        this.paginator = paginator;
        JTSimpleTable.setModel(model);       
        model.setData(paginator.nextResult());
        pageLabel.setText(new StringBuilder("1/").append(paginator.getMaxPage() + 1).toString());
        //seta colunas editáveis, como padrão
        model.setEditableDefault(false);
    }

    public void setData(Paginator<T> paginator) {
        model.setData(paginator.nextResult());
        pageLabel.setText(new StringBuilder("1/").append(paginator.getMaxPage() + 1).toString());
    }
    
    /**
     * Habilita ou desabilita grid
     * @param hab 
     */
    public void habDesabGrid(boolean hab){
        this.JTSimpleTable.setEnabled(hab);
    }    
    
    /**
     *Habilita ou desabilita panel com botões de paginação
     * @param hab 
     */
    public void habDesabBotoesPag(boolean hab){
        JBtNext.setEnabled(hab);
        jBTFirst.setEnabled(hab);
        jBTLast.setEnabled(hab);
        jBTPrev.setEnabled(hab);
    }
    /**
     * Seta coluna editável
     * @param col coluna
     * @param editable editável
     */
    public void setColEditable(int col, boolean editable) {
        this.model.setColEditable(col, editable);
    }
    
    public JTable getJtable(){
    return this.JTSimpleTable;
   }
    
   public void refreshData(){
        paginator = new ListPaginator<>(model.getData(), 10);
            model.setData(paginator.nextResult());
            pageLabel.setText(new StringBuilder(("1/")).append(
                paginator.getMaxPage() + 1).toString());
   }
    
    

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jToggleButton2 = new javax.swing.JToggleButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        JTSimpleTable = new javax.swing.JTable();
        jPPag = new javax.swing.JPanel();
        jBTFirst = new javax.swing.JButton();
        jBTPrev = new javax.swing.JButton();
        pageLabel = new javax.swing.JLabel();
        JBtNext = new javax.swing.JButton();
        jBTLast = new javax.swing.JButton();

        jToggleButton2.setText("jToggleButton2");

        JTSimpleTable.setAutoCreateRowSorter(true);
        JTSimpleTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Title 1", "Title 2", "Title 3", "Title 4"
            }
        ));
        jScrollPane1.setViewportView(JTSimpleTable);

        jBTFirst.setText("<<");
        jBTFirst.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBTFirstActionPerformed(evt);
            }
        });

        jBTPrev.setText("<");
        jBTPrev.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBTPrevActionPerformed(evt);
            }
        });

        pageLabel.setText("jLabel1");

        JBtNext.setText(">");
        JBtNext.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JBtNextActionPerformed(evt);
            }
        });

        jBTLast.setText(">>");
        jBTLast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBTLastActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPPagLayout = new javax.swing.GroupLayout(jPPag);
        jPPag.setLayout(jPPagLayout);
        jPPagLayout.setHorizontalGroup(
            jPPagLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPPagLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jBTFirst)
                .addGap(0, 0, 0)
                .addComponent(jBTPrev)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pageLabel)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(JBtNext)
                .addGap(0, 0, 0)
                .addComponent(jBTLast))
        );
        jPPagLayout.setVerticalGroup(
            jPPagLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPPagLayout.createSequentialGroup()
                .addGroup(jPPagLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBTFirst)
                    .addComponent(jBTPrev)
                    .addComponent(pageLabel)
                    .addComponent(JBtNext)
                    .addComponent(jBTLast))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(322, Short.MAX_VALUE)
                .addComponent(jPPag, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(319, 319, 319))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 192, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPPag, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void JBtNextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JBtNextActionPerformed
        if (!model.getData().isEmpty()) {
            if(paginator.getData().isEmpty())
                return;
            if (paginator.getCurrentPage() >= paginator.getMaxPage()) {
                paginator.setCurrentPage(paginator.getMaxPage());
            }
            model.setData(paginator.nextResult());
            pageLabel.setText(new StringBuilder(String.valueOf(paginator.getCurrentPage())).append("/").
                    append(paginator.getMaxPage() + 1).toString());
        } else {
            return;
        }
    }//GEN-LAST:event_JBtNextActionPerformed

    private void jBTPrevActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBTPrevActionPerformed
        if (!model.getData().isEmpty()) {

            if (paginator.getCurrentPage() - 2 < 0) {
                return;
            } else {
                paginator.setCurrentPage(paginator.getCurrentPage() - 2);
                model.setData(paginator.nextResult());
                pageLabel.setText((new StringBuilder(String.valueOf(String
                        .valueOf(paginator.getCurrentPage())))).append("/").append(
                        paginator.getMaxPage() + 1).toString());
                return;
            }
        } else {
            return;
        }

    }//GEN-LAST:event_jBTPrevActionPerformed

    private void jBTFirstActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBTFirstActionPerformed
        if (!model.getData().isEmpty()) {
            //já esta no limite, então não faz nada
            if(paginator.getCurrentPage()-1 == -1 || paginator.getCurrentPage() == -1)
                return;
            paginator.setCurrentPage(0);
            model.setData(paginator.nextResult());
            pageLabel.setText((new StringBuilder("1/")).append(
                    paginator.getMaxPage() + 1).toString());
        } else {
            return;
        }

    }//GEN-LAST:event_jBTFirstActionPerformed

    private void jBTLastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBTLastActionPerformed
        if (!model.getData().isEmpty()) {
            //impedindo que se faça algo, caso vetor esteja preenchido apenas com uma posição
            if (paginator.getData().size() == 0) {
                return;
            }
            paginator.setCurrentPage(paginator.getMaxPage());
            model.setData(paginator.nextResult());
            pageLabel.setText((new StringBuilder(String.valueOf(String.valueOf(paginator
                    .getCurrentPage())))).append("/").append(paginator.getMaxPage() + 1)
                    .toString());
        } else {
            return;
        }

    }//GEN-LAST:event_jBTLastActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton JBtNext;
    private javax.swing.JTable JTSimpleTable;
    private javax.swing.JButton jBTFirst;
    private javax.swing.JButton jBTLast;
    private javax.swing.JButton jBTPrev;
    private javax.swing.JPanel jPPag;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JToggleButton jToggleButton2;
    private javax.swing.JLabel pageLabel;
    // End of variables declaration//GEN-END:variables
}
