/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.atsinformatica.midler.ui;

import br.com.atsinformatica.erp.dao.ClienteERPDAO;
import br.com.atsinformatica.erp.dao.ParaEcomDAO;
import br.com.atsinformatica.erp.dao.PedidoCERPDAO;
import br.com.atsinformatica.erp.dao.PedidoIERPDAO;
import br.com.atsinformatica.erp.dao.ProdutoDAO;
import br.com.atsinformatica.erp.entity.CPFClienteBean;
import br.com.atsinformatica.erp.entity.ClienteERPBean;
import br.com.atsinformatica.erp.entity.EnderecoERPBean;
import br.com.atsinformatica.erp.entity.EstadoERPBean;
import br.com.atsinformatica.erp.entity.ParaEcomBean;
import br.com.atsinformatica.erp.entity.PedidoCERPBean;
import br.com.atsinformatica.erp.entity.PedidoIERPBean;
import br.com.atsinformatica.prestashop.controller.AddressController;
import br.com.atsinformatica.prestashop.controller.CPFModuleDataController;
import br.com.atsinformatica.prestashop.controller.CarrierController;
import br.com.atsinformatica.prestashop.controller.CustomerController;
import br.com.atsinformatica.prestashop.controller.OrderController;
import br.com.atsinformatica.prestashop.controller.StateController;
import br.com.atsinformatica.prestashop.model.node.OrderRowNode;
import static java.awt.Frame.MAXIMIZED_BOTH;
import java.awt.Toolkit;
import java.io.File;
import java.sql.SQLException;
import java.util.List;
import java.util.concurrent.TimeUnit;
import javax.swing.JFrame;
import javax.swing.JPanel;
import org.apache.log4j.Logger;

/**
 *
 * @author AlexsanderPimenta
 */
public class PanelPrincipal extends javax.swing.JFrame {

    private static PanelPrincipal instance = null;
    private PanelHistorico panelHistorico;
    private PanelConfiguracao panelConfiguracao;
    private static Logger logger = Logger.getLogger(PanelPrincipal.class);

    /**
     * Creates new form PanelPrincipal
     */
    public PanelPrincipal() {
        initComponents();
        this.uJPanelImagem1.setImagem(new File(System.getProperty("user.dir") + "\\src\\assets\\images\\logo-w186.png"));
        this.setIconImage(Toolkit.getDefaultToolkit().getImage(System.getProperty("user.dir") + "\\src\\assets\\icons\\ecom.png"));
        this.setTitle("Modulo Integrador E-commerce ATS");

        // this.jLSpinner.setVisible(false);
        this.setExtendedState(MAXIMIZED_BOTH);

        jMainPanel.setSize(this.getWidth(), 421);

        //centraliza
        this.setLocationRelativeTo(null);
        //Iniciando Time de sincronização de pedidos
        setaTimer();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        timerPedidos = new org.netbeans.examples.lib.timerbean.Timer();
        JHistorico = new javax.swing.JButton();
        JConfiguracao = new javax.swing.JButton();
        JSair = new javax.swing.JButton();
        jMainPanel = new javax.swing.JPanel();
        uJPanelImagem1 = new componentes.UJPanelImagem();
        jPanel2 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jStatus = new javax.swing.JLabel();
        jOperacao = new javax.swing.JLabel();
        btListaPedidos = new javax.swing.JButton();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        jMenuItem2 = new javax.swing.JMenuItem();
        jMenuItem3 = new javax.swing.JMenuItem();
        jMenuItem4 = new javax.swing.JMenuItem();
        jMenu2 = new javax.swing.JMenu();
        jMenuItem1 = new javax.swing.JMenuItem();

        timerPedidos.addTimerListener(new org.netbeans.examples.lib.timerbean.TimerListener() {
            public void onTime(java.awt.event.ActionEvent evt) {
                timerPedidosOnTime(evt);
            }
        });

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        JHistorico.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/icons/application_view_list.png"))); // NOI18N
        JHistorico.setToolTipText("Histórico");
        JHistorico.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        JHistorico.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        JHistorico.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JHistoricoActionPerformed(evt);
            }
        });

        JConfiguracao.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/icons/icon_settings.png"))); // NOI18N
        JConfiguracao.setToolTipText("Configurações");
        JConfiguracao.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        JConfiguracao.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        JConfiguracao.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JConfiguracaoActionPerformed(evt);
            }
        });

        JSair.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/icons/door_out.png"))); // NOI18N
        JSair.setToolTipText("Sair");
        JSair.setHorizontalTextPosition(javax.swing.SwingConstants.RIGHT);
        JSair.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        JSair.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                JSairActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jMainPanelLayout = new javax.swing.GroupLayout(jMainPanel);
        jMainPanel.setLayout(jMainPanelLayout);
        jMainPanelLayout.setHorizontalGroup(
            jMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 1263, Short.MAX_VALUE)
        );
        jMainPanelLayout.setVerticalGroup(
            jMainPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 496, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout uJPanelImagem1Layout = new javax.swing.GroupLayout(uJPanelImagem1);
        uJPanelImagem1.setLayout(uJPanelImagem1Layout);
        uJPanelImagem1Layout.setHorizontalGroup(
            uJPanelImagem1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 142, Short.MAX_VALUE)
        );
        uJPanelImagem1Layout.setVerticalGroup(
            uJPanelImagem1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 73, Short.MAX_VALUE)
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jPanel1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.RAISED));

        jStatus.setText("             ");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jOperacao.setText("               ");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jOperacao)
                .addContainerGap(960, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
            .addComponent(jOperacao)
        );

        btListaPedidos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/icons/Accounting-Purchase-order-icon.png"))); // NOI18N
        btListaPedidos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btListaPedidosActionPerformed(evt);
            }
        });

        jMenu1.setText("Inicial");

        jMenuItem2.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_H, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/icons/application_view_list.png"))); // NOI18N
        jMenuItem2.setText("Histórico");
        jMenuItem2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem2ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem2);

        jMenuItem3.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_A, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem3.setText("Sobre");
        jMenuItem3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem3ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem3);

        jMenuItem4.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_E, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/icons/door_out.png"))); // NOI18N
        jMenuItem4.setText("Sair");
        jMenuItem4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem4ActionPerformed(evt);
            }
        });
        jMenu1.add(jMenuItem4);

        jMenuBar1.add(jMenu1);

        jMenu2.setText("Ferramentas");

        jMenuItem1.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_G, java.awt.event.InputEvent.CTRL_MASK));
        jMenuItem1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/icons/icon_settings.png"))); // NOI18N
        jMenuItem1.setText("Configurações");
        jMenuItem1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItem1ActionPerformed(evt);
            }
        });
        jMenu2.add(jMenuItem1);

        jMenuBar1.add(jMenu2);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jMainPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(uJPanelImagem1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(5, 5, 5)
                .addComponent(JHistorico, javax.swing.GroupLayout.PREFERRED_SIZE, 49, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btListaPedidos)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(JConfiguracao, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(JSair, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(btListaPedidos, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(JSair, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(JConfiguracao, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(JHistorico, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jMainPanel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(uJPanelImagem1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void JConfiguracaoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JConfiguracaoActionPerformed
        //limpa status
        this.setjStatus("");
        //seta status
        this.setjStatus("Cadastro de configurações");
        //remove todos componentes do painel e atualiza painel
        jMainPanel.removeAll();
        jMainPanel.updateUI();
        panelConfiguracao = new PanelConfiguracao();
        panelConfiguracao.setSize(this.getWidth(), 495);
        //adciona o painel no painel principal
        jMainPanel.add(panelConfiguracao);
        jMainPanel.validate();
    }//GEN-LAST:event_JConfiguracaoActionPerformed

    private void JSairActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JSairActionPerformed
        //limpa status
        this.setjStatus("");
        //limpa operação
        this.setjOperacao("");
        //seta visibilidade
        this.setVisible(false);
        //seta tipo de operação ao fechar
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        //encerra aplicação
        System.exit(0);
    }//GEN-LAST:event_JSairActionPerformed

    private void jMenuItem1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem1ActionPerformed
        JConfiguracaoActionPerformed(evt);
    }//GEN-LAST:event_jMenuItem1ActionPerformed

    private void jMenuItem3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem3ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jMenuItem3ActionPerformed

    private void jMenuItem2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem2ActionPerformed
        JHistoricoActionPerformed(evt);
    }//GEN-LAST:event_jMenuItem2ActionPerformed

    private void jMenuItem4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItem4ActionPerformed
        JSairActionPerformed(evt);
    }//GEN-LAST:event_jMenuItem4ActionPerformed

    private void JHistoricoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_JHistoricoActionPerformed
        jMainPanel.removeAll();
        jMainPanel.updateUI();
        this.setjStatus("Histórico de sincronizações");
        panelHistorico = new PanelHistorico();
        panelHistorico.setSize(this.getWidth(), 495);
        //adciona o painel no painel principal
        jMainPanel.add(panelHistorico);
        jMainPanel.validate();
    }//GEN-LAST:event_JHistoricoActionPerformed

    private void btListaPedidosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btListaPedidosActionPerformed
        jMainPanel.removeAll();
        jMainPanel.updateUI();
        PanelListaPedidos panelListaPedidos = new PanelListaPedidos();
        panelListaPedidos.setSize(this.getWidth(), 495);
        jMainPanel.add(panelListaPedidos);
        jMainPanel.validate();
        btListaPedidos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/icons/Accounting-Purchase-order-icon.png")));
    }//GEN-LAST:event_btListaPedidosActionPerformed

    private void timerPedidosOnTime(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_timerPedidosOnTime

        sincPedidos();
    }//GEN-LAST:event_timerPedidosOnTime

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(PanelPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(PanelPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(PanelPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(PanelPrincipal.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new PanelPrincipal().setVisible(true);
            }
        });
    }

    /**
     * @return the jStatus
     */
    public String getjStatus() {
        return jStatus.getText();
    }

    /**
     * @param jStatus the jStatus to set
     */
    public void setjStatus(String status) {
        this.jStatus.setText(status);
    }

    /**
     * @return the jOperacao
     */
    public String getjOperacao() {
        return jOperacao.getText();
    }

    /**
     * @param jOperacao the jOperacao to set
     */
    public void setjOperacao(String operacao) {
        this.jOperacao.setText(operacao);
    }

    public static PanelPrincipal getInstance() {
        if (instance == null) {
            instance = new PanelPrincipal();
        }
        return instance;
    }

    public JPanel getJMainPanel() {
        return this.getJMainPanel();
    }

    /*
     Iniciando implementação para Sincronizar pedidos
     */
    private void sincPedidos() {
        boolean temNovoPedido = false;
        OrderController orderController = new OrderController();
        PedidoCERPDAO pedidoERPDAO = new PedidoCERPDAO();
        List<PedidoCERPBean> listoPedido = null;
        try {
            //Buscando a lista de Pedidos que ainda não esta no banco de dados.
            listoPedido = orderController.syncListaOrder();
            /*
             Vefificando se a lista de pedido esta vazia, se estiver vazia sai da função.
             */
            if (listoPedido.isEmpty()) {
                logger.info("Nenhum pedido pendente para sincronizar. ");
                return;
            }
        } catch (SQLException ex) {

            logger.error("Erro ao efetuar sincronização de Pedidos da loja virtual: " + ex);
        }

        /**
         * Chamando o metodo sincGetPedido, que com o numero do pedido, busca o
         * cliente, busca o endereço, busca o CPF. se tiver no banco ERP os
         * dados do cliente apenas atualiza, se não tiver no banco ERP vai
         * inserir os dados.
         */
        for (PedidoCERPBean pedido : listoPedido) {
            sincGetPedido(pedido);
            /*
             Após sincronizar pedido, vai mudar o incone.
             */
            btListaPedidos.setIcon(new javax.swing.ImageIcon(getClass().getResource("/assets/icons/order-icon-light.png")));
        }
    }

    private void sincGetPedido(PedidoCERPBean pedido) {
        OrderController orderController = new OrderController();
        CustomerController customerController = new CustomerController();
        AddressController addressController = new AddressController();
        CPFModuleDataController cPFModuleDataController = new CPFModuleDataController();
        StateController stateController = new StateController();
        CarrierController carrierController = new CarrierController();

        ClienteERPBean beanCliente;
        EnderecoERPBean beanEndereco;
        CPFClienteBean beanCPF;
        ClienteERPDAO clienteERPDAO = new ClienteERPDAO();
        EstadoERPBean estadoERPBean = new EstadoERPBean();
        EstadoERPBean estadoCobracaoERPBean = new EstadoERPBean();
        PedidoCERPDAO pedidoERPDAO = new PedidoCERPDAO();

        try {
            beanCliente = customerController.syncCustomerPrestashop(Integer.valueOf(pedido.getId_customer()));
            beanEndereco = addressController.syncAddressControllerPrestashop(Integer.valueOf(pedido.getId_address_delivery()), Integer.valueOf(pedido.getId_address_invoice()));

            beanCPF = cPFModuleDataController.sysncCPDModuleData(Integer.valueOf(pedido.getId_customer()));

            pedido.setObservacao(carrierController.syncCarrierControllerPrestashop(Integer.valueOf(pedido.getId_carrier())));

            if (Integer.valueOf(beanEndereco.getId_state()) > 0) {
                estadoERPBean = stateController.syncStateControllerPrestashop(Integer.valueOf(beanEndereco.getId_state()), Integer.valueOf(beanEndereco.getEstadoCob()));
            }

            if (clienteERPDAO.verificacaoClienteEcomExiste(beanCliente.getId())) {  //Verificando se o cliente já foi sincronizado.
                //Cliente já existe - Vai atualizar
                if (!clienteERPDAO.atualizarClienteComEndereco(beanCliente, beanEndereco, beanCPF, estadoERPBean)) {
                    //se o retorno de Aualizar Cliente for FALSE ele sai da função
                    return;
                }

            } else {
                //Cliente não existe - Vai inserir
                if (!clienteERPDAO.gravarClienteComEndereco(beanCliente, beanEndereco, beanCPF, estadoERPBean)) {
                    //se o retorno de Gravar Cliente for FALSE ele sai da função
                    return;
                }
            }

            /**
             * Chamando o gravar pedido, que tem como retorno o numero do pedido
             * se gravou com sucesso, ou NULL se deu erro.
             */
            String codPedido = pedidoERPDAO.gravarPedido(pedido, clienteERPDAO.retornaCodClienteERP(pedido.getId_customer()));
            if (codPedido != null) {
                String codEmpresa = new ParaEcomDAO().listaTodos().get(0).getCodEmpresaEcom();
                String codClienteERP = clienteERPDAO.retornaCodClienteERP(pedido.getId_customer());
                PedidoIERPBean pedidoIERPBean = new PedidoIERPBean();
                PedidoIERPDAO pedidoIERPDAO = new PedidoIERPDAO();
                ProdutoDAO produtoDAO = new ProdutoDAO();

                for (OrderRowNode orderRowNode : pedido.getListItensPedido()) {
                    /*
                     Pegando o codigo do produtoERP
                     */
                    String codProdutoERP = produtoDAO.retornaCodProdutoERP(String.valueOf(orderRowNode.getProductId()));

                    pedidoIERPBean.setCodEmpresa(codEmpresa);
                    pedidoIERPBean.setCodPedido(codPedido);
                    pedidoIERPBean.setCodClienteERP(codClienteERP);
                    pedidoIERPBean.setCodProdERP(codProdutoERP);
                    pedidoIERPBean.setQuantidade(orderRowNode.getProductQuantity());
                    pedidoIERPBean.setPrecoUnit(orderRowNode.getUnitPriceTaxIncl());
                    pedidoIERPBean.setCodGradERP(String.valueOf(orderRowNode.getProductAttributeId()));
                    pedidoIERPBean.setUnidadeSaida(produtoDAO.retornaUnidadeSaidaProdutoERP(codProdutoERP));

                    pedidoIERPDAO.gravar(pedidoIERPBean);
                }

                /*
                 Gravando complemento do pedido                
                 */
                pedidoERPDAO.gravarPedidoCompl(codPedido, codClienteERP, beanEndereco, estadoERPBean);
            }
        } catch (Exception e) {
            logger.error("Erro ao efetuar sincronização de Pedidos da loja virtual: " + e);
        }
    }
    /*
     Final de implementação de Sincronizar pedidos
     */

    /**
     * Seta timer de sincronização
     */
    private void setaTimer() {
        ParaEcomDAO dao = new ParaEcomDAO();
        try {
            ParaEcomBean bean = dao.listaTodos().get(0);
            if (bean != null) {

                if (bean.getAtivaSincronizacao() == 1) {
                    //Time Pedidos
                    long minutesCad = TimeUnit.SECONDS.toMillis(bean.getMinutosmov()) * 60;
                    timerPedidos.setDelay(minutesCad);
                    timerPedidos.stop();
                    timerPedidos.start();
                }
            }
        } catch (Exception e) {
            logger.error("Erro ao setar timer de sincronização: " + e);
        }
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton JConfiguracao;
    private javax.swing.JButton JHistorico;
    private javax.swing.JButton JSair;
    private javax.swing.JButton btListaPedidos;
    private javax.swing.JPanel jMainPanel;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenu jMenu2;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItem2;
    private javax.swing.JMenuItem jMenuItem3;
    private javax.swing.JMenuItem jMenuItem4;
    private javax.swing.JLabel jOperacao;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel jStatus;
    protected org.netbeans.examples.lib.timerbean.Timer timerPedidos;
    private componentes.UJPanelImagem uJPanelImagem1;
    // End of variables declaration//GEN-END:variables
}
